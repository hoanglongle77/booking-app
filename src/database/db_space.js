import {
  getDatabase,
  ref,
  set,
  get,
  onValue,
} from "https://www.gstatic.com/firebasejs/10.8.1/firebase-database.js";
import { db } from "../config/firebase.js"; // Import t·ª´ config chu·∫©n
const fetchCount = 0;

export function fetchSpacesRealTime(callback) {
  console.log("üì¢ B·∫Øt ƒë·∫ßu l·∫Øng nghe d·ªØ li·ªáu Spaces...");

  const spacesRef = ref(db, "categories");

  // L·∫Øng nghe d·ªØ li·ªáu thay ƒë·ªïi
  onValue(spacesRef, (snapshot) => {
    const categoriesData = snapshot.val();
    if (!categoriesData) {
      console.warn("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu categories!");
      callback([]);
      return;
    }

    const allSpaces = [];
    Object.entries(categoriesData).forEach(([categoryId, category]) => {
      if (category.spaces) {
        Object.entries(category.spaces).forEach(([spaceId, space]) => {
          allSpaces.push({ id: spaceId, categoryId, ...space });
        });
      }
    });

    console.log("üîÑ D·ªØ li·ªáu Spaces ƒë√£ c·∫≠p nh·∫≠t:", allSpaces);
    callback(allSpaces);
  });
}

// ‚úÖ H√†m l·∫•y danh s√°ch categories (Tr·∫£ v·ªÅ Promise thay v√¨ callback)
export function fetchCategories() {
  return new Promise((resolve, reject) => {
    const categoriesRef = ref(db, "categories");

    get(categoriesRef)
      .then((snapshot) => {
        const categoriesData = snapshot.val();
        if (!categoriesData) {
          console.warn("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu categories!");
          resolve([]); // Tr·∫£ v·ªÅ danh s√°ch r·ªóng n·∫øu kh√¥ng c√≥ categories
          return;
        }

        const categories = [];
        Object.entries(categoriesData).forEach(([key, value]) => {
          categories.push({ id: key, name: value.name });
        });

        console.log("‚úÖ Danh s√°ch categories:", categories);
        resolve(categories);
      })
      .catch(reject);
  });
}

export async function uploadImageToServer(file) {
  return new Promise((resolve) => {
    const imagePath = `../assets/img/${Date.now()}_${file.name}`;
    resolve(imagePath);
  });
}

// H√†m l∆∞u Space v√†o danh m·ª•c ƒë√£ ch·ªçn
export async function saveSpace(spaceData) {
  try {
    const db = getDatabase();
    const categoryRef = ref(db, `categories/${spaceData.category}`);

    // L·∫•y d·ªØ li·ªáu category ƒë·ªÉ ki·ªÉm tra
    const snapshot = await get(categoryRef);
    if (!snapshot.exists()) {
      throw new Error("Danh m·ª•c kh√¥ng t·ªìn t·∫°i!");
    }

    // T·∫°o ID cho Space m·ªõi
    const spaceId = generateUniqueId(); // H√†m t·∫°o ID ng·∫´u nhi√™n

    // D·ªØ li·ªáu Space ch·ªâ ch·ª©a c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
    const spaceRef = ref(
      db,
      `categories/${spaceData.category}/spaces/${spaceId}`
    );
    const spaceInfo = {
      name: spaceData.name,
      price_per_hour: spaceData.price_per_hour,
      description: spaceData.description,
      status: spaceData.status,
      imageUrl: spaceData.imageUrl,
      location: spaceData.location,
      created_at: spaceData.created_at,
    };

    // C·∫≠p nh·∫≠t database
    await set(spaceRef, spaceInfo);

    console.log("‚úÖ Space ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u Space:", error);
    throw error;
  }
}

// H√†m t·∫°o ID ng·∫´u nhi√™n cho Space
function generateUniqueId() {
  return Math.random().toString(36).substr(2, 10); // VD: "a1b2c3d4e5"
}

export async function updateSpace(spaceId, spaceData) {
  try {
    const db = getDatabase();
    const spaceRef = ref(
      db,
      `categories/${spaceData.category}/spaces/${spaceId}`
    );

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªßa space
    await set(spaceRef, {
      name: spaceData.name,
      price_per_hour: spaceData.price_per_hour,
      description: spaceData.description,
      status: spaceData.status,
      imageUrl: spaceData.imageUrl,
      location: spaceData.location,
    });

    console.log("‚úÖ Space ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
    return true; // Th√™m return ƒë·ªÉ bi·∫øt khi n√†o c·∫≠p nh·∫≠t th√†nh c√¥ng
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t Space:", error);
    throw error;
  }
}

export async function fetchSpaceById(categoryId, spaceId) {
  const spaceRef = ref(db, `categories/${categoryId}/spaces/${spaceId}`);
  try {
    const snapshot = await get(spaceRef);
    if (snapshot.exists()) {
      return snapshot.val();
    } else {
      console.error("üö® Space kh√¥ng t·ªìn t·∫°i!");
      return null;
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu space:", error);
    return null;
  }
}

// booking ---------------------
export async function getCategories() {
  try {
    const categoriesRef = ref(db, "categories");
    const snapshot = await get(categoriesRef);
    return snapshot.exists() ? snapshot.val() : {};
  } catch (error) {
    console.error("L·ªói khi l·∫•y categories:", error);
    return {};
  }
}

// L·∫•y danh s√°ch Spaces theo Category ID
export async function getSpaces(categoryId) {
  try {
    const spacesRef = ref(db, `categories/${categoryId}/spaces`);
    const snapshot = await get(spacesRef);
    return snapshot.exists() ? snapshot.val() : {};
  } catch (error) {
    console.error(`L·ªói khi l·∫•y spaces c·ªßa category ${categoryId}:`, error);
    return {};
  }
}

export async function getSpaceById(categoryId, spaceId) {
  try {
    const spaceRef = ref(db, `categories/${categoryId}/spaces/${spaceId}`);
    const snapshot = await get(spaceRef);
    return snapshot.exists() ? snapshot.val() : null;
  } catch (error) {
    console.error(
      `L·ªói khi l·∫•y space ${spaceId} trong category ${categoryId}:`,
      error
    );
    return null;
  }
}

export async function getSeatBySpace(categoryId, spaceId) {
  try {
    const seatsRef = ref(
      db,
      `categories/${categoryId}/spaces/${spaceId}/seats`
    );
    const snapshot = await get(seatsRef);

    if (!snapshot.exists()) {
      console.log(`Kh√¥ng c√≥ gh·∫ø trong space ${spaceId}`);
      return [];
    }

    const seats = snapshot.val();
    return Object.keys(seats).map((seatId) => ({
      id: seatId,
      ...seats[seatId],
    }));
  } catch (error) {
    console.error(`L·ªói khi l·∫•y gh·∫ø c·ªßa space ${spaceId}:`, error);
    return [];
  }
}

// L·∫•y th√¥ng tin Seat theo ID
export async function getSeatById(categoryId, spaceId, seatId) {
  try {
    const seatRef = ref(
      db,
      `categories/${categoryId}/spaces/${spaceId}/seats/${seatId}`
    );
    const snapshot = await get(seatRef);

    if (!snapshot.exists()) {
      console.log(`Kh√¥ng t√¨m th·∫•y seat ${seatId} trong space ${spaceId}`);
      return null;
    }

    return {
      id: seatId,
      ...snapshot.val(),
    };
  } catch (error) {
    console.error(`L·ªói khi l·∫•y seat ${seatId} trong space ${spaceId}:`, error);
    return null;
  }
}
